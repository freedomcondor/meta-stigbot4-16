From f2a8db99ef4a54e38741327c4b6b361b1619c897 Mon Sep 17 00:00:00 2001
From: Michael Allwright <allsey87@gmail.com>
Date: Tue, 8 May 2018 12:01:12 +0200
Subject: [PATCH] media: Use GPIO controls in OV5640

---
 drivers/media/i2c/ov5640.c | 98 +++++++++++++++++-----------------------------
 1 file changed, 36 insertions(+), 62 deletions(-)

diff --git a/drivers/media/i2c/ov5640.c b/drivers/media/i2c/ov5640.c
index e2dd352224c7..d5b36f8f3302 100644
--- a/drivers/media/i2c/ov5640.c
+++ b/drivers/media/i2c/ov5640.c
@@ -8,9 +8,6 @@
  * (at your option) any later version.
  */
 
-#include <linux/clk.h>
-#include <linux/clk-provider.h>
-#include <linux/clkdev.h>
 #include <linux/ctype.h>
 #include <linux/delay.h>
 #include <linux/device.h>
@@ -21,7 +18,6 @@
 #include <linux/slab.h>
 #include <linux/types.h>
 #include <linux/gpio/consumer.h>
-#include <linux/regulator/consumer.h>
 #include <media/v4l2-async.h>
 #include <media/v4l2-ctrls.h>
 #include <media/v4l2-device.h>
@@ -31,6 +27,7 @@
 /* min/typical/max system clock (xclk) frequencies */
 #define OV5640_XCLK_MIN  6000000
 #define OV5640_XCLK_MAX 24000000
+#define OV5640_XCLK_FIXED 24000000
 
 #define OV5640_DEFAULT_SLAVE_ID 0x3c
 
@@ -134,15 +131,6 @@ static const int ov5640_framerates[] = {
 	[OV5640_30_FPS] = 30,
 };
 
-/* regulator supplies */
-static const char * const ov5640_supply_name[] = {
-	"DOVDD", /* Digital I/O (1.8V) suppply */
-	"DVDD",  /* Digital Core (1.5V) supply */
-	"AVDD",  /* Analog (2.8V) supply */
-};
-
-#define OV5640_NUM_SUPPLIES ARRAY_SIZE(ov5640_supply_name)
-
 /*
  * Image size under 1280 * 960 are SUBSAMPLING
  * Image size upper 1280 * 960 are SCALING
@@ -195,10 +183,11 @@ struct ov5640_dev {
 	struct v4l2_subdev sd;
 	struct media_pad pad;
 	struct v4l2_fwnode_endpoint ep; /* the parsed DT endpoint info */
-	struct clk *xclk; /* system clock to OV5640 */
 	u32 xclk_freq;
 
-	struct regulator_bulk_data supplies[OV5640_NUM_SUPPLIES];
+	struct gpio_desc *avdd_enable_gpio;
+	struct gpio_desc *dvdd_enable_gpio;
+	struct gpio_desc *clock_enable_gpio;
 	struct gpio_desc *reset_gpio;
 	struct gpio_desc *pwdn_gpio;
 
@@ -1674,23 +1663,13 @@ static void ov5640_reset(struct ov5640_dev *sensor)
 
 static int ov5640_set_power_on(struct ov5640_dev *sensor)
 {
-	struct i2c_client *client = sensor->i2c_client;
 	int ret;
-
-	ret = clk_prepare_enable(sensor->xclk);
-	if (ret) {
-		dev_err(&client->dev, "%s: failed to enable clock\n",
-			__func__);
-		return ret;
-	}
-
-	ret = regulator_bulk_enable(OV5640_NUM_SUPPLIES,
-				    sensor->supplies);
-	if (ret) {
-		dev_err(&client->dev, "%s: failed to enable regulators\n",
-			__func__);
-		goto xclk_off;
-	}
+	/* enable clock */
+	gpiod_set_value_cansleep(sensor->clock_enable_gpio, 1);
+	/* enable dvdd */
+	gpiod_set_value_cansleep(sensor->dvdd_enable_gpio, 1);
+	/* enable avdd */
+	gpiod_set_value_cansleep(sensor->avdd_enable_gpio, 1);
 
 	ov5640_reset(sensor);
 	ov5640_power(sensor, true);
@@ -1703,17 +1682,24 @@ static int ov5640_set_power_on(struct ov5640_dev *sensor)
 
 power_off:
 	ov5640_power(sensor, false);
-	regulator_bulk_disable(OV5640_NUM_SUPPLIES, sensor->supplies);
-xclk_off:
-	clk_disable_unprepare(sensor->xclk);
+	/* disable avdd */
+	gpiod_set_value_cansleep(sensor->avdd_enable_gpio, 0);
+	/* disable dvdd */
+	gpiod_set_value_cansleep(sensor->dvdd_enable_gpio, 0);
+	/* disable clock */
+	gpiod_set_value_cansleep(sensor->clock_enable_gpio, 0);
 	return ret;
 }
 
 static void ov5640_set_power_off(struct ov5640_dev *sensor)
 {
 	ov5640_power(sensor, false);
-	regulator_bulk_disable(OV5640_NUM_SUPPLIES, sensor->supplies);
-	clk_disable_unprepare(sensor->xclk);
+	/* disable avdd */
+	gpiod_set_value_cansleep(sensor->avdd_enable_gpio, 0);
+	/* disable dvdd */
+	gpiod_set_value_cansleep(sensor->dvdd_enable_gpio, 0);
+	/* disable clock */
+	gpiod_set_value_cansleep(sensor->clock_enable_gpio, 0);
 }
 
 static int ov5640_set_power(struct ov5640_dev *sensor, bool on)
@@ -2399,18 +2385,6 @@ static const struct v4l2_subdev_ops ov5640_subdev_ops = {
 	.pad = &ov5640_pad_ops,
 };
 
-static int ov5640_get_regulators(struct ov5640_dev *sensor)
-{
-	int i;
-
-	for (i = 0; i < OV5640_NUM_SUPPLIES; i++)
-		sensor->supplies[i].supply = ov5640_supply_name[i];
-
-	return devm_regulator_bulk_get(&sensor->i2c_client->dev,
-				       OV5640_NUM_SUPPLIES,
-				       sensor->supplies);
-}
-
 static int ov5640_check_chip_id(struct ov5640_dev *sensor)
 {
 	struct i2c_client *client = sensor->i2c_client;
@@ -2479,14 +2453,11 @@ static int ov5640_probe(struct i2c_client *client,
 		return ret;
 	}
 
-	/* get system clock (xclk) */
-	sensor->xclk = devm_clk_get(dev, "xclk");
-	if (IS_ERR(sensor->xclk)) {
-		dev_err(dev, "failed to get xclk\n");
-		return PTR_ERR(sensor->xclk);
-	}
+	/* request clock enable pin */
+	sensor->clock_enable_gpio =
+		devm_gpiod_get(dev,"clock-enable", GPIOD_OUT_HIGH);
 
-	sensor->xclk_freq = clk_get_rate(sensor->xclk);
+	sensor->xclk_freq = OV5640_XCLK_FIXED;
 	if (sensor->xclk_freq < OV5640_XCLK_MIN ||
 	    sensor->xclk_freq > OV5640_XCLK_MAX) {
 		dev_err(dev, "xclk frequency out of range: %d Hz\n",
@@ -2495,11 +2466,11 @@ static int ov5640_probe(struct i2c_client *client,
 	}
 
 	/* request optional power down pin */
-	sensor->pwdn_gpio = devm_gpiod_get_optional(dev, "powerdown",
-						    GPIOD_OUT_HIGH);
+	sensor->pwdn_gpio =
+		devm_gpiod_get_optional(dev, "powerdown", GPIOD_OUT_HIGH);
 	/* request optional reset pin */
-	sensor->reset_gpio = devm_gpiod_get_optional(dev, "reset",
-						     GPIOD_OUT_HIGH);
+	sensor->reset_gpio =
+		devm_gpiod_get_optional(dev, "reset", GPIOD_OUT_HIGH);
 
 	v4l2_i2c_subdev_init(&sensor->sd, client, &ov5640_subdev_ops);
 
@@ -2510,9 +2481,12 @@ static int ov5640_probe(struct i2c_client *client,
 	if (ret)
 		return ret;
 
-	ret = ov5640_get_regulators(sensor);
-	if (ret)
-		return ret;
+	/* request avdd supply enable pin */
+	sensor->avdd_enable_gpio =
+		devm_gpiod_get(dev,"avdd-enable", GPIOD_OUT_HIGH);
+	/* request dvdd supply enable pin */
+	sensor->dvdd_enable_gpio =
+		devm_gpiod_get(dev,"dvdd-enable", GPIOD_OUT_HIGH);
 
 	mutex_init(&sensor->lock);
 
-- 
2.11.0


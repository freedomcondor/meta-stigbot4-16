From 96d80e2d028b0967aabf49579644c3aaf560ec71 Mon Sep 17 00:00:00 2001
From: Condor3397 <freedomcondor@126.com>
Date: Tue, 8 May 2018 15:30:14 +0200
Subject: [PATCH] omap4iss_driverchanged

---
 drivers/staging/media/omap4iss/iss.c | 76 +++++++++++++++++++++++++++++++++++-
 1 file changed, 75 insertions(+), 1 deletion(-)

diff --git a/drivers/staging/media/omap4iss/iss.c b/drivers/staging/media/omap4iss/iss.c
index b1036baebb03..ac761be60b65 100644
--- a/drivers/staging/media/omap4iss/iss.c
+++ b/drivers/staging/media/omap4iss/iss.c
@@ -28,6 +28,8 @@
 #include <media/v4l2-device.h>
 #include <media/v4l2-ctrls.h>
 
+//#include <linux/pm_runtime.h>
+
 #include "iss.h"
 #include "iss_regs.h"
 
@@ -841,7 +843,6 @@ static int iss_get_clocks(struct iss_device *iss)
 		dev_err(iss->dev, "Unable to get iss_ctrlclk clock info\n");
 		return PTR_ERR(iss->iss_ctrlclk);
 	}
-
 	return 0;
 }
 
@@ -866,12 +867,17 @@ struct iss_device *omap4iss_get(struct iss_device *iss)
 	if (iss->ref_count > 0)
 		goto out;
 
+											pr_err("omap4iss_get before enable clocks");
+											dump_stack();
+
 	if (iss_enable_clocks(iss) < 0) {
 		__iss = NULL;
 		goto out;
 	}
 
+											pr_err("omap4iss_get before enable interrupts");
 	iss_enable_interrupts(iss);
+											pr_err("omap4iss_get after enable interrupts");
 
 out:
 	if (__iss)
@@ -993,12 +999,15 @@ static int iss_register_entities(struct iss_device *iss)
 		sizeof(iss->media_dev.model));
 	iss->media_dev.hw_revision = iss->revision;
 	iss->media_dev.ops = &iss_media_ops;
+	media_device_init(&iss->media_dev);
+
 	ret = media_device_register(&iss->media_dev);
 	if (ret < 0) {
 		dev_err(iss->dev, "Media device registration failed (%d)\n",
 			ret);
 		return ret;
 	}
+	
 
 	iss->v4l2_dev.mdev = &iss->media_dev;
 	ret = v4l2_device_register(iss->dev, &iss->v4l2_dev);
@@ -1030,6 +1039,7 @@ static int iss_register_entities(struct iss_device *iss)
 		goto done;
 
 	/* Register external entities */
+	/*
 	for (subdevs = pdata->subdevs; subdevs && subdevs->subdevs; ++subdevs) {
 		struct v4l2_subdev *sensor;
 		struct media_entity *input;
@@ -1042,10 +1052,12 @@ static int iss_register_entities(struct iss_device *iss)
 
 		sensor->host_priv = subdevs;
 
+	*/
 		/* Connect the sensor to the correct interface module.
 		 * CSI2a receiver through CSIPHY1, or
 		 * CSI2b receiver through CSIPHY2
 		 */
+	/*
 		switch (subdevs->interface) {
 		case ISS_INTERFACE_CSI2A_PHY1:
 			input = &iss->csi2a.subdev.entity;
@@ -1073,9 +1085,14 @@ static int iss_register_entities(struct iss_device *iss)
 		if (ret < 0)
 			goto done;
 	}
+	*/
+
+								pr_err("iss register before subdevnodes");
 
 	ret = v4l2_device_register_subdev_nodes(&iss->v4l2_dev);
 
+								pr_err("iss register after subdevnodes");
+
 done:
 	if (ret < 0)
 		iss_unregister_entities(iss);
@@ -1207,13 +1224,19 @@ static int iss_probe(struct platform_device *pdev)
 	unsigned int i;
 	int ret;
 
+										pr_err("Harry said: iss_probe start");
+
+	/*
 	if (!pdata)
 		return -EINVAL;
+	*/
 
 	iss = devm_kzalloc(&pdev->dev, sizeof(*iss), GFP_KERNEL);
 	if (!iss)
 		return -ENOMEM;
 
+										pr_err("iss_probe after kzalloc");
+
 	mutex_init(&iss->iss_mutex);
 
 	iss->dev = &pdev->dev;
@@ -1235,21 +1258,45 @@ static int iss_probe(struct platform_device *pdev)
 		goto error;
 	}
 
+										pr_err("iss_probe after syscon");
+
+	//--------------------------------------------------------------------------
+	pr_err("iss_probe, after syscon");
+	pr_err("iss_probe, pdev->num_resources = %d",pdev->num_resources);
+	for (i = 0; i < pdev->num_resources; i++ )
+		{
+			pr_err("pdev resource start=%x",pdev->resource[i].start);
+			pr_err("pdev resource end=%x",pdev->resource[i].end);
+			pr_err("pdev resource name=%s",pdev->resource[i].name);
+		}
+	//--------------------------------------------------------------------------
+										pr_err("iss_probe after printing resources");
+
 	/* Clocks */
 	ret = iss_map_mem_resource(pdev, iss, OMAP4_ISS_MEM_TOP);
 	if (ret < 0)
 		goto error;
 
+										pr_err("iss_probe after memresource top");
+
 	ret = iss_get_clocks(iss);
 	if (ret < 0)
 		goto error;
 
+										pr_err("iss_probe after get clock");
+
 	if (!omap4iss_get(iss))
 		goto error;
 
+										pr_err("iss_probe after omap4iss get");
+
+										/*
 	ret = iss_reset(iss);
 	if (ret < 0)
 		goto error_iss;
+										*/
+
+										pr_err("iss_probe after reset");
 
 	iss->revision = iss_reg_read(iss, OMAP4_ISS_MEM_TOP, ISS_HL_REVISION);
 	dev_info(iss->dev, "Revision %08x found\n", iss->revision);
@@ -1270,6 +1317,8 @@ static int iss_probe(struct platform_device *pdev)
 	if (ret < 0)
 		goto error_iss;
 
+										pr_err("iss_probe after clock enable");
+
 	ret = iss_isp_reset(iss);
 	if (ret < 0)
 		goto error_iss;
@@ -1293,27 +1342,40 @@ static int iss_probe(struct platform_device *pdev)
 		goto error_iss;
 	}
 
+										pr_err("iss_probe after request irq");
+
 	/* Entities */
 	ret = iss_initialize_modules(iss);
 	if (ret < 0)
 		goto error_iss;
 
+										pr_err("iss_probe after initialize modules");
+
 	ret = iss_register_entities(iss);
 	if (ret < 0)
 		goto error_modules;
 
+										pr_err("iss_probe after register entities");
+
 	ret = media_entity_enum_init(&iss->crashed, &iss->media_dev);
 	if (ret)
 		goto error_entities;
 
+										pr_err("iss_probe after enum init");
+
 	ret = iss_create_links(iss);
 	if (ret < 0)
 		goto error_entities;
 
+										pr_err("iss_probe after create links");
+
 	omap4iss_put(iss);
 
+										pr_err("iss_probe after putput");
+
 	return 0;
 
+
 error_entities:
 	iss_unregister_entities(iss);
 	media_entity_enum_cleanup(&iss->crashed);
@@ -1324,6 +1386,7 @@ static int iss_probe(struct platform_device *pdev)
 error:
 	mutex_destroy(&iss->iss_mutex);
 
+										pr_err("iss_probe before return ret: %d",ret);
 	return ret;
 }
 
@@ -1342,6 +1405,16 @@ static const struct platform_device_id omap4iss_id_table[] = {
 	{ "omap4iss", 0 },
 	{ },
 };
+
+/* add of match table  */
+static const struct of_device_id omap4iss_of_table[] = {
+	{ .compatible = "ti,omap4iss" },
+	{ },
+};
+MODULE_DEVICE_TABLE(of, omap4iss_of_table);
+/* end adding of match table  */
+
+
 MODULE_DEVICE_TABLE(platform, omap4iss_id_table);
 
 static struct platform_driver iss_driver = {
@@ -1350,6 +1423,7 @@ static struct platform_driver iss_driver = {
 	.id_table	= omap4iss_id_table,
 	.driver = {
 		.name	= "omap4iss",
+		.of_match_table = of_match_ptr(omap4iss_of_table),
 	},
 };
 
-- 
2.14.1

